// Test if a new solution can be added for contract - SolnSquareVerifier

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SolnSquareVerifier = artifacts.require('SolnSquareVerifier');

// import proof's from zokrates folder
const Proof = require('../../zokrates/code/square/proof.json');

contract('SolutionsSquareVerifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    // parameters to pass to verifyTx function 
    const proof = Proof.proof;
    const inputs = Proof.inputs;


    describe('Testing if', function () {
        beforeEach(async function () { 
            this.contract = await SolnSquareVerifier.new();
        })

        it('new solution can be added to array',async function(){

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event SolutionAdded()
        this.contract.SolutionAdded({}, (err, event) => {eventEmitted = true});

            try{
                 await this.contract.addSolutionToArray(account_one,2)
            }catch(err){
                console.log(err)
            }

            assert.equal(eventEmitted, true,"Solution was not added to array")
        })

        it('can mint ERC721 for contract', async function(){

            let result;

            try{
                result = this.contract.mintNFT(proof,inputs,3,account_one)
            }catch(err){
                console.log(err)
            }
        })

    })

})